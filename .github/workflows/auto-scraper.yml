name: Auto Scraper (Inquirer + Philstar)

on:
  schedule:
    - cron: '0 2 * * *' # daily 02:00 UTC
  workflow_dispatch:
    inputs:
      site:
        description: 'Site to run (inquirer or philstar). Leave empty to run both.'
        required: false
        default: ''
      run_tests_first:
        description: 'Run tests first (true/false)'
        required: false
        default: 'true'

permissions:
  contents: write
  issues: write

jobs:
  ensure-lockfile:
    runs-on: ubuntu-latest
    outputs:
      created: ${{ steps.check_lock.outputs.created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check for package-lock.json
        id: check_lock
        run: |
          if [ -f package-lock.json ]; then
            echo "created=false" >> $GITHUB_OUTPUT
          else
            echo "created=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate package-lock.json and commit node_modules (if missing)
        if: steps.check_lock.outputs.created == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install dependencies to generate a package-lock.json and node_modules
          npm install --no-audit --no-fund

          # commit package-lock.json and node_modules so other jobs can reuse them
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add package-lock.json node_modules || true
          git commit -m "chore(ci): add package-lock.json and node_modules [skip ci]" || echo "No changes to commit"

          BRANCH="${{ github.ref_name }}"
          if [ -z "$BRANCH" ]; then
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
          fi
          git push origin HEAD:"$BRANCH" || echo "Push failed (branch protection?)"

  install-deps:
    needs: ensure-lockfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Use committed node_modules if present, otherwise install and commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          if [ -d "node_modules" ]; then
            echo "node_modules already present from repo — skipping install"
            ls -ld node_modules || true
            exit 0
          fi

          echo "node_modules not present; running npm ci to install deps"
          npm ci

          # commit node_modules so future runs can reuse
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add node_modules || true
          git commit -m "chore(ci): add node_modules [skip ci]" || echo "No changes to commit"

          BRANCH="${{ github.ref_name }}"
          if [ -z "$BRANCH" ]; then
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
          fi
          git push origin HEAD:"$BRANCH" || echo "Push failed (branch protection?)"

  scrape:
    needs: install-deps
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check node_modules presence
        run: |
          if [ -d "node_modules" ]; then
            echo "node_modules present — ready to run scrapers"
          else
            echo "node_modules missing — running npm ci as fallback"
            npm ci
          fi
          
      - name: Ensure Chromium (try npx then apt fallback)
        run: |
          set -e
          PKG_VER=$(node -e "try{console.log(require('puppeteer/package.json').version)}catch(e){console.log('latest')}")
          echo "puppeteer version: $PKG_VER"
          # try npx installer first; if it fails, fall back to apt
          if npx --yes puppeteer@$PKG_VER browsers install chrome; then
            echo "npx puppeteer browser install succeeded"
          else
            echo "npx install failed — falling back to apt"
            sudo apt-get update
            sudo apt-get install -y chromium-browser
          fi
      env:
        PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser

      - name: Run tests (optional)
        if: ${{ github.event.inputs.run_tests_first == 'true' }}
        run: |
          if [ "${{ github.event.inputs.site }}" = "" ]; then
            npm test
          else
            npm test -- --site="${{ github.event.inputs.site }}"
          fi

      - name: Run scrapers
        run: |
          if [ "${{ github.event.inputs.site }}" = "inquirer" ]; then
            npm run scrape:inquirer
          elif [ "${{ github.event.inputs.site }}" = "philstar" ]; then
            npm run scrape:philstar
          else
            npm run scrape:all
          fi

      - name: Commit scraped articles to main
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add articles || true
          git commit -m "chore(scraper): add scraped articles [skip ci]" || echo "No changes to commit"
          git push origin HEAD:main || echo "Push failed (branch protection?)"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs