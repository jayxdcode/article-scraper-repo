name: Run Selectors Tests & Report

# trigger manually or on push to main (adjust as needed)
on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write   # allow committing log files
  issues: write     # allow creating/updating issues

jobs:
  run-tests:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: "--max-old-space-size=4096"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm ci || npm install

      - name: Prepare logs dir
        run: |
          mkdir -p logs

      - name: Run selector tests (node)
        id: run_tests
        # capture both stdout and stderr to file
        run: |
          TIMESTAMP=$(date --utc +"%Y-%m-%dT%H%M%SZ")
          # run test runner; save combined stdout+stderr
          node ./node/test/test.js 2>&1 | tee logs/test-run-${TIMESTAMP}.log
          echo "logfile=logs/test-run-${TIMESTAMP}.log" >> $GITHUB_OUTPUT

      - name: Commit log file (if changed)
        if: always()
        run: |
          logpath=$(jq -r '.logfile' <<< "${{ steps.run_tests.outputs }}" 2>/dev/null || echo "${{ steps.run_tests.outputs.logfile }}")
          # fallback if above doesn't work:
          logpath=${logpath:-logs/test-run-$(date --utc +"%Y-%m-%dT%H%M%SZ").log}
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$logpath" || true
          # only commit if staged changes
          if ! git diff --cached --quiet; then
            git commit -m "chore(tests): add test log $logpath" || true
            git push origin HEAD:main || true
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update GitHub Issue with log and summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            // read the log file path from previous step output (available in env or outputs)
            // try to find the newest logs/test-run-*.log as fallback
            const logsDir = 'logs';
            let logFile = null;
            const files = fs.readdirSync(logsDir).filter(f => f.startsWith('test-run-')).sort();
            if (files.length === 0) {
              core = require('@actions/core');
              core.setFailed('No log files found in logs/ directory.');
              return;
            } else {
              logFile = path.join(logsDir, files[files.length - 1]);
            }

            const rawLog = fs.readFileSync(logFile, 'utf8');

            // Attempt to parse a title from log: first line like "Test Run: INQ 2025-10-19_xdf3"
            const firstLine = rawLog.split('\n').find(Boolean) || '';
            // Use firstLine if it matches "Test Run:"
            let issueTitle;
            if (firstLine.startsWith('Test Run:')) {
              issueTitle = firstLine.trim();
            } else {
              // fallback title
              const now = new Date().toISOString().replace(/T.*/,'');
              issueTitle = `Test Run: ${now}`;
            }

            // Find existing issue with exact title
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const existing = issues.find(i => i.title === issueTitle);

            // Build compact summary from log: look for "TEST RESULTS" block or construct simple counts
            let summary = '';
            const summaryMatch = rawLog.match(/={5,}\nTEST RESULTS\n={5,}\n([\s\S]*?)\n---/m);
            if (summaryMatch) {
              summary = '```\n' + summaryMatch[1].trim() + '\n```';
            } else {
              // try to extract PASS/FAIL counts lines
              const lines = rawLog.split('\n');
              const counts = lines.filter(l => /\bPASS\b|\bFAIL\b/.test(l) && /:\s*\d+/.test(l));
              summary = counts.length ? '```\n' + counts.join('\n') + '\n```' : '_No compact summary found in log._';
            }

            const body = [
              `### Log file: \`${path.basename(logFile)}\``,
              '',
              '---',
              '',
              '#### Compact Summary',
              summary,
              '',
              '---',
              '',
              '#### Full Log',
              '```',
              rawLog.slice(0, 32000), // limit issue body if very large (GitHub supports big bodies, but be safe)
              '```'
            ].join('\n');

            if (existing) {
              // update the issue (append a comment with full log and update the body)
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                body: `New test run appended. See compact summary below.\n\n${summary}\n\nFull log attached as a comment.`
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                body: `${existing.body || ''}\n\n\n---\n\nAppended log from ${new Date().toISOString()}:\n\n${rawLog.slice(0, 32000)}`
              });
              core = require('@actions/core');
              core.info(`Updated existing issue #${existing.number} (${issueTitle})`);
            } else {
              // create a fresh issue
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body
              });
              core = require('@actions/core');
              core.info(`Created issue #${newIssue.data.number} (${issueTitle})`);
            }
