name: Run Selectors Tests & Report

# trigger manually, or on push to main, or on schedule (everyday at 10:00 PHT / 02:00 UTC)
on:
  workflow_dispatch:
    inputs:
      generate_lock_forced:
        description: 'If true, create a new package-lock.json, even if it already exists'
        required: false
        default: 'true'
  schedule:
    - cron: '0 2 * * *' # 10:00 Asia/Manila (PHT) -> 02:00 UTC

permissions:
  contents: write   # allow committing log files
  issues: write     # allow creating/updating issues

jobs:
  run-tests:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: "--max-old-space-size=4096"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node (for running tests)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ~/node_modules
            ~/chrome
            /snap
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Ensure package-lock.json (generate and commit if missing)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          if [ "${{ github.event.inputs.generate_lock_forced }}" = "true" ]; then
            echo "Generating package-lock.json"
            npm install --package-lock-only
            echo "lock_exists=true" >> $GITHUB_OUTPUT
          else
            if [ -f package-lock.json ]; then
              echo "lock_exists=true" >> $GITHUB_OUTPUT
            else
              echo "Generating package-lock.json (package-lock-only)"
              npm install --package-lock-only
              echo "lock_exists=true" >> $GITHUB_OUTPUT
            fi
          fi

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # add files
          git add package-lock.json

          git commit -m "ci(deps): added/updated package-lock.json" || echo "No changes to commit"

          # push to main
          git push origin HEAD:main || echo "Push failed (branch protection?)"

      - name: Install dependecies (if cache miss)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          echo
          echo "Installing node dependencies..."
          echo
          npm ci
          echo
          echo
          # try npx installer
          echo "Installing puppeteer browsers (prefer npx)"
          if npx --yes @puppeteer/browsers install chrome@121.0.6167.85; then
            echo "npx browser installer succeeded"
          else
            echo "npx browser installer failed; attempting to install puppeteer and let it fetch the browser"
            npm explore puppeteer -- npm run install || true
          fi

          # locate a likely chrome binary from installed puppeteer local-chromium
          CHROME_SRC=$(find node_modules -type f -path "*/.local-chromium/*/chrome-linux64/chrome" -print -quit || true)
          echo "Found chrome candidate at: $CHROME_SRC"

          if [ -z "$CHROME_SRC" ]; then
            echo "No chrome binary found under node_modules/.local-chromium. Attempting fallback: apt-get chromium-browser"
            sudo apt-get update
            sudo apt-get install -y chromium-browser || true
            if command -v chromium-browser >/dev/null 2>&1; then
              CHROME_SRC=$(command -v chromium-browser)
              echo "Found system chromium at $CHROME_SRC"
            fi
          fi

          if [ -z "$CHROME_SRC" ]; then
            echo "Could not find a chrome binary to commit. Exiting with non-zero (you can still commit manually)."
            exit 1
          fi

          DEST_DIR="chrome/linux-121.0.6167.85/chrome-linux64"
          mkdir -p "$DEST_DIR"
          cp -v "$CHROME_SRC" "$DEST_DIR/chrome"
          chmod +x "$DEST_DIR/chrome"
          echo "Copied chrome to $DEST_DIR/chrome"

      - name: Install chromium snap
        run: |
          echo "Installing chromium snap..."
          echo "Attempting install..."
          sudo snap install chromium || true

      - name: Prepare logs dir
        run: |
          mkdir -p logs

      - name: Run selector tests (node)
        id: run_tests
        # capture both stdout and stderr to file
        run: |
          set -euo pipefail
          TIMESTAMP=$(date --utc +"%Y-%m-%dT%H%M%SZ")
          # run test runner; save combined stdout+stderr
          node ./node/test/test-runner.js 2>&1 | tee logs/test-run-${TIMESTAMP}.log
          echo "logfile=logs/test-run-${TIMESTAMP}.log" >> $GITHUB_OUTPUT

      - name: Commit log file (if changed)
        if: always()
        run: |
          logpath=$(jq -r '.logfile' <<< "${{ steps.run_tests.outputs }}" 2>/dev/null || echo "${{ steps.run_tests.outputs.logfile }}")
          logpath=${logpath:-logs/test-run-$(date --utc +"%Y-%m-%dT%H%M%SZ").log}
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$logpath" || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(tests): add test log $logpath" || true
            git push origin HEAD:main || true
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-log
          path: logs

  report-failure:
    name: Create issue on failure (include traceback)
    runs-on: ubuntu-latest
    needs: run-tests
    if: needs.run-tests.result == 'failure'

    steps:
      - name: Download logs artifact
        uses: actions/download-artifact@v4
        with:
          name: test-log
          path: ./logs

      - name: Create GitHub issue with traceback
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // find a sensible log file in ./logs
            let logfile = null;
            try {
              const files = fs.readdirSync('logs').filter(f => f.endsWith('.log') || f.includes('test-run'));
              if (files && files.length) {
                // choose the newest-looking file
                files.sort();
                logfile = path.join('logs', files[files.length-1]);
              }
            } catch(e) {
              // ignore
            }

            const tag = 'test-run-fail';
            const id = new Date().toISOString().replace(/[:.]/g, '-');
            const title = `[${tag}] ${id}`;

            let body = `Automated test run failed for **${context.repo.owner}/${context.repo.repo}**\n\n`;
            body += `Workflow: ${process.env.GITHUB_WORKFLOW} (run ${process.env.GITHUB_RUN_ID})\n\n`;

            if (logfile && fs.existsSync(logfile)) {
              let content = fs.readFileSync(logfile, 'utf8');
              // truncate to avoid huge issues
              if (content.length > 64000) content = content.slice(0, 64000) + '\n\n[truncated]';
              body += 'Traceback / log (truncated):\n\n```\n' + content + '\n```\n';
            } else {
              body += 'No log file found to include in this issue (artifact may be missing).\n\n';
            }

            body += '\n\nPlease attach additional context or assign for triage.';

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['ci', 'test-failure']
            });
