name: Run Selectors Tests & Report

# trigger manually or on push to main (adjust as needed)
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'config.json'

permissions:
  contents: write   # allow committing log files
  issues: write     # allow creating/updating issues

jobs:
  run-tests:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: "--max-old-space-size=4096"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fail if package-lock.json missing
        run: |
          if [ ! -f package-lock.json ]; then
            echo "package-lock.json not found; this workflow expects the lockfile to be committed. Exiting."
            exit 1
          fi
          
      - name: Ensure node_modules present (exit on missing)
        run: |
          if [ -d "node_modules" ]; then
            echo "node_modules present â€” continuing"
            ls -ld node_modules || true
          else
            echo "node_modules is not present. Please run the 'deps-commit' workflow to create and commit node_modules. Exiting."
            exit 1
          fi

      - name: Setup Node (for running tests)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install @actions/core if missing and commit
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          if [ -d "node_modules/@actions/core" ]; then
            echo "@actions/core already present. Skipping installation."
            exit 0
          fi

          echo "@actions/core not found. Installing..."
          npm install @actions/core@latest --no-audit --no-fund

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Stage relevant files (node_modules, lockfile, and possibly package.json)
          git add -A node_modules package-lock.json package.json || true

          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            COMMIT_MSG="chore(deps): add @actions/core to node_modules (auto-added by workflow)"
            git commit -m "$COMMIT_MSG"

            REPO="${GITHUB_REPOSITORY}"
            BRANCH="${GITHUB_REF##*/}"
            echo "Pushing changes to $REPO on branch $BRANCH..."
            git push "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${REPO}.git" "HEAD:${BRANCH}"
          fi
          
      - name: Ensure Chromium binary committed
        run: |
          # path relative to repo root where we expect chrome to be committed
          EXPECTED_CHROME_PATH="chrome/linux-121.0.6167.85/chrome-linux64/chrome"
          if [ ! -x "$EXPECTED_CHROME_PATH" ] && [ ! -f "$EXPECTED_CHROME_PATH" ]; then
            echo "Expected chrome binary not found at $EXPECTED_CHROME_PATH"
            echo "Please run deps-commit workflow to commit the chrome binary."
            exit 1
          fi
          echo "Found chrome binary at $EXPECTED_CHROME_PATH"

      - name: Install chromium snap
        run: |
          echo "Attempting install..."
          sudo snap install chromium

      - name: Prepare logs dir
        run: |
          mkdir -p logs

      - name: Run selector tests (node)
        id: run_tests
        # capture both stdout and stderr to file
        run: |
          TIMESTAMP=$(date --utc +"%Y-%m-%dT%H%M%SZ")
          # run test runner; save combined stdout+stderr
          node ./node/test/test.js 2>&1 | tee logs/test-run-${TIMESTAMP}.log
          echo "logfile=logs/test-run-${TIMESTAMP}.log" >> $GITHUB_OUTPUT

      - name: Commit log file (if changed)
        if: always()
        run: |
          logpath=$(jq -r '.logfile' <<< "${{ steps.run_tests.outputs }}" 2>/dev/null || echo "${{ steps.run_tests.outputs.logfile }}")
          # fallback if above doesn't work:
          logpath=${logpath:-logs/test-run-$(date --utc +"%Y-%m-%dT%H%M%SZ").log}
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$logpath" || true
          # only commit if staged changes
          if ! git diff --cached --quiet; then
            git commit -m "chore(tests): add test log $logpath" || true
            git push origin HEAD:main || true
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update GitHub Issue with log and summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            // read the log file path from previous step output (available in env or outputs)
            // try to find the newest logs/test-run-*.log as fallback
            const logsDir = 'logs';
            let logFile = null;
            const files = fs.readdirSync(logsDir).filter(f => f.startsWith('test-run-')).sort();
            if (files.length === 0) {
              core = require('@actions/core');
              core.setFailed('No log files found in logs/ directory.');
              return;
            } else {
              logFile = path.join(logsDir, files[files.length - 1]);
            }

            const rawLog = fs.readFileSync(logFile, 'utf8');

            // Attempt to parse a title from log: first line like "Test Run: INQ 2025-10-19_xdf3"
            const firstLine = rawLog.split('\n').find(Boolean) || '';
            // Use firstLine if it matches "Test Run:"
            let issueTitle;
            if (firstLine.startsWith('Test Run:')) {
              issueTitle = firstLine.trim();
            } else {
              // fallback title
              const now = new Date().toISOString().replace(/T.*/,'');
              issueTitle = `Test Run: ${now}`;
            }

            // Find existing issue with exact title
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const existing = issues.find(i => i.title === issueTitle);

            // Build compact summary from log: look for "TEST RESULTS" block or construct simple counts
            let summary = '';
            const summaryMatch = rawLog.match(/={5,}\nTEST RESULTS\n={5,}\n([\s\S]*?)\n---/m);
            if (summaryMatch) {
              summary = '```\n' + summaryMatch[1].trim() + '\n```';
            } else {
              // try to extract PASS/FAIL counts lines
              const lines = rawLog.split('\n');
              const counts = lines.filter(l => /\bPASS\b|\bFAIL\b/.test(l) && /:\s*\d+/.test(l));
              summary = counts.length ? '```\n' + counts.join('\n') + '\n```' : '_No compact summary found in log._';
            }

            const body = [
              `### Log file: \`${path.basename(logFile)}\``,
              '',
              '---',
              '',
              '#### Compact Summary',
              summary,
              '',
              '---',
              '',
              '#### Full Log',
              '```',
              rawLog.slice(0, 32000), // limit issue body if very large (GitHub supports big bodies, but be safe)
              '```'
            ].join('\n');

            if (existing) {
              // update the issue (append a comment with full log and update the body)
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                body: `New test run appended. See compact summary below.\n\n${summary}\n\nFull log attached as a comment.`
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                body: `${existing.body || ''}\n\n\n---\n\nAppended log from ${new Date().toISOString()}:\n\n${rawLog.slice(0, 32000)}`
              });
              core = require('@actions/core');
              core.info(`Updated existing issue #${existing.number} (${issueTitle})`);
            } else {
              // create a fresh issue
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body
              });
              core = require('@actions/core');
              core.info(`Created issue #${newIssue.data.number} (${issueTitle})`);
            }
